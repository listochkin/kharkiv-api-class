{
  "name": "pull-window",
  "description": "Aggregate a pull-stream into windows.",
  "version": "2.1.2",
  "homepage": "https://github.com/dominictarr/pull-window",
  "repository": {
    "type": "git",
    "url": "git://github.com/dominictarr/pull-window.git"
  },
  "dependencies": {
    "pull-core": "~1.0.0",
    "looper": "2.0.0"
  },
  "devDependencies": {
    "pull-stream": "~2.20",
    "tape": "~1.0.4"
  },
  "scripts": {
    "test": "set -e; for t in test/*.js; do node $t; done"
  },
  "author": {
    "name": "Dominic Tarr",
    "email": "dominic.tarr@gmail.com",
    "url": "http://dominictarr.com"
  },
  "license": "MIT",
  "readme": "# pull-window\n\nAggregate a pull-stream into windows.\n\nSeveral helpers are provided for particular types of windows,\nsliding, tumbling, etc.\n\nAnd also, a low level \n\n## Example: \"tumbling\" window\n\nsum every 10 items.\n\n``` js\nvar pull   = require('pull-stream')\nvar window = require('pull-window')\n\nfunction everyTen () {\n  var i = 0\n  //window calls init with each data item,\n  //and a callback to close that window.\n  return window(function (data, cb) {\n    //if you don't want to start a window here,\n    //return undefined\n    if(i != 0) return\n    var sum = 0\n\n    //else return a function.\n    //this will be called all data\n    //until you callback.\n    return function (end, data) {\n      if(end) return cb(null, sum)\n      sum += data\n      if(++i >= 10) {\n        i = 0\n        cb(null, sum)\n      }\n    }\n  }\n}\n\npull(\n  pull.count(1000),\n  everyTen(),\n  pull.log()\n)\n```\n\n## Example: variable sized window\n\nEach window doesn't have to be the same size...\n\n``` js\nvar pull   = require('pull-stream')\nvar window = require('pull-window')\n\nfunction groupTo100 () {\n  var sum = null\n  return window(function (_, cb) {\n    if(sum != null) return\n\n    //sum stuff together until you have 100 or more\n    return function (end, data) {\n      if(end) return cb(null, sum)\n      sum += data\n      if(sum >= 100) {\n        //copy sum like this, incase the next item\n        //comes through sync\n        var _sum = sum; sum = null\n        cb(null, _sum)\n      }\n    }\n  })\n}\n\npull(\n  pull.count(1000)\n  groupTo100(),\n  pull.log()\n)\n```\n\n## Example: sliding window\n\nto make more over lapping windows\njust return the window function more often.\n\n``` js\nvar pull   = require('pull-stream')\nvar window = require('pull-window')\n\nfunction sliding () {\n  return window(function (_, cb) {\n    var sum = 0, i = 0\n\n    //sum stuff together until you have 100 or more\n    return function (end, data) {\n      if(end) return cb(null, sum)\n      sum += data\n      if(++i >= 10) {\n        //in this example, each window gets it's own sum,\n        //so we don't need to copy it.\n        cb(null, sum)\n      }\n    }\n  })\n}\n\npull(\n  pull.count(100)\n  sliding(),\n  pull.log()\n)\n```\n\n\n## API\n\n\n### window (start, map)\n``` js\n\nwindow(function startWindow (data, cb) {\n\n  //called on each chunk\n  //including the first one\n  return function addToWindow (end, data) {\n    //cb(null, aggregate) when done.\n  }\n}, function mapWindow (start, data) {\n  //(optional)\n  //map the window to something that tracks start, also\n})\n```\n\nBy default, windows are mapped to `{start: firstData, data: aggregate}`.\nunless you pass in an different `mapWindow` function.\n\n\n### window.sliding(reduce, size)\n\nreduce every `size` items into a single value, in a sliding window\n\n### window.recent(size, time)\n\ntumbling window that groups items onto an array,\neither every `size` items, or within `time` ms,\nwhich ever occurs earliest. \n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/dominictarr/pull-window/issues"
  },
  "_id": "pull-window@2.1.2",
  "dist": {
    "shasum": "9aee40e13d5b88550f7f0db16213b0940d8d7b06",
    "tarball": "http://registry.npmjs.org/pull-window/-/pull-window-2.1.2.tgz"
  },
  "_from": "pull-window@>=2.1.2 <3.0.0",
  "_npmVersion": "1.3.0",
  "_npmUser": {
    "name": "dominictarr",
    "email": "dominic.tarr@gmail.com"
  },
  "maintainers": [
    {
      "name": "dominictarr",
      "email": "dominic.tarr@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "9aee40e13d5b88550f7f0db16213b0940d8d7b06",
  "_resolved": "https://registry.npmjs.org/pull-window/-/pull-window-2.1.2.tgz"
}
